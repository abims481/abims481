LIST IN PYTHON
It may happen that you have to read, store, process, and finally, print dozens, maybe hundreds, perhaps even thousands of numbers. What then? Do you need to create a separate variable for each value? Will you have to spend long hours writing statements like the one below?
numbers = [10, 5, 7, 2, 1]
The elements inside a list may have different types. Some of them may be integers, others floats, and yet others may be lists.
Indexing lists
numbers = [10, 5, 7, 2, 1]
print("Original list contents:", numbers)  # Printing original list contents.
 numbers[1] = 12
print("New list contents: ", numbers)  # Current list contents.
[10, 12, 7, 2, 1]
Accessing list content
print(numbers[2]) # Accessing the list's third element.

The len() function
The length of a list may vary during execution. New elements may be added to the list, while others may be removed from it. This means that the list is a very dynamic entity.
If you want to check the list's current length, you can use a function named len() (its name comes from length).
The function takes the list's name as an argument, and returns the number of elements currently stored inside the list (in other words â€’ the list's length).
Look at the last line of code in the editor, run the program and check what value it will print to the console. Can you guess?
print("\nList length:", len(numbers))  # Printing the list's length.
Removing elements from a list
del numbers[1]
print(len(numbers))
print(numbers) =  [10, 7, 2, 1]
Negative indices are legal
numbers = [10,12, 7, 2, 1]
print(numbers[-1]) = 1

Task
There once was a hat. The hat contained no rabbit, but a list of five numbers: 1, 2, 3, 4, and 5.
Your task is to:
write a line of code that prompts the user to replace the middle number in the list with an integer number entered by the user (Step 1)
write a line of code that removes the last element from the list (Step 2)
write a line of code that prints the length of the existing list (Step 3).
hat_list = [1, 2, 3, 4, 5]  # This is an existing list of numbers hidden in the hat.
print(hat_list)
hat_list [2] = [8]
del hat_list[4]
print(len(hat_list)) =
 [1, 2, 3, 4, 5]
4
[1, 2, [8], 4]
This (Method) is an essential issue right now, as we're going to show you how to add new elements to an existing list. This can be done with methods owned by all the lists, not by functions.
Adding elements to a list: append() and insert()
list.append(value)
Such an operation is performed by a method named append(). It takes its argument's value and puts it at the end of the list which owns the method.The list's length then increases by one.
hat_list.append(15) 
[1,2,8,4,15].

numbers.insert(0, 222)
print(len(numbers))
print(numbers) =  [222,12, 7, 2, 1]
my_list = []  # Creating an empty list.
for i in range(5):
my_list.append(i + 1)
print(my_list)
[1,2,3,4,5]
my_list = []  # Creating an empty list. Reverse order.
for i in range(5):
my_list.insert(0, i + 1)
 print(my_list)
[5,4,3,2,1]
Making use of lists
my_list = ["white", "purple", "blue", "yellow", "green"]
 for color in my_list:
    print(color)

lst = [1, 2, 3, 4, 5]
lst_2 = []
add = 0
for number in lst:
    add += number
    lst_2.append(add)
print(lst_2)
[1, 3, 6, 10, 15]


