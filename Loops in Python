Loops in Python
Do you agree with the statement presented below?
while there is something to do
    do it
The semantic difference is more important: when the condition is met, if performs its statements only once; while repeats the execution as long as the condition evaluates to True.
if you want to execute more than one statement inside one while loop, you must (as with if) indent all the instructions in the same way;
an instruction or set of instructions executed inside the while loop is called the loop's body;
if the condition is False (equal to zero) as early as when it is tested for the first time, the body is not executed even once (note the analogy of not having to do anything if there is nothing to do);
the body should be able to change the condition's value, because if the condition is True at the beginning, the body might run continuously to infinity – notice that doing a thing usually decreases the number of things to do).
An Infinite loop
while True:
    print("I'm stuck inside a loop.")
Definite Loop
for i in range(5):
    print(i)
else:
    print("else:", i)
[01234], 4

Even vs Odd number
number = int(input("Enter a number or type 0 to stop: "))
 # 0 terminates execution.
while number != 0:
    # Check if the number is odd.
    if number % 2 == 1:
        # Increase the odd_numbers counter.
        odd_numbers += 1
    else:
        # Increase the even_numbers counter.
        even_numbers += 1
    # Read the next number.
 number = int(input("Enter a number or type 0 to stop: "))
# Print results.
print("Odd numbers count:", odd_numbers)
print("Even numbers count:", even_numbers)

while number != 0: and while number:.
The condition that checks if a number is odd can be coded in these equivalent forms, too:
if number % 2 == 1: and if number % 2:.

counter = 5
while counter:
    print("Inside the loop.", counter)
    counter -= 1
print("Outside the loop.", counter)

FOR LOOP
It would be nice if somebody could do this boring counting for you. Is that possible?
Of course it is – there's a special loop for these kinds of tasks, and it is named for.
for i in range(100):
    # do_something()
    pass
i = 111
for i in range(2, 1):
    print(i)
else:
    print("else:", i) 
output: else: 111
The loop's body won't be executed here at all. Note: we've assigned the i variable before the loop.
Run the program and check its output.
When the loop's body isn't executed, the control variable retains the value it had before the loop
Note: the range() function accepts only integers as its arguments, and generates sequences of integers
for i in range(2, 8):
    print("The value of i is currently", i)
More about the for loop and the range() function with three arguments
for i in range(2, 8, 3):
    print("The value of i is currently", i)
The value of i is currently 2
The value of i is currently 5
2 (starting number) → 5 (2 increment by 3 equals 5 – the number is within the range from 2 to 8) → 8 (5 increment by 3 equals 8 – the number is not within the range from 2 to 8, because the stop parameter is not included in the sequence of numbers generated by the function.)
Let's have a look at a short program whose task is to write some of the first powers of two:
power = 1
for expo in range(16):
    print("2 to the power of", expo, "is", power)
    power *= 2
output
2 to the power of 0 is 1
2 to the power of 1 is 2
2 to the power of 2 is 4
2 to the power of 3 is 8
2 to the power of 4 is 16
2 to the power of 5 is 32
2 to the power of 6 is 64
2 to the power of 7 is 128
2 to the power of 8 is 256
2 to the power of 9 is 512
2 to the power of 10 is 1024
2 to the power of 11 is 2048
2 to the power of 12 is 4096
2 to the power of 13 is 8192
2 to the power of 14 is 16384
2 to the power of 15 is 32768
The break and continue statements
it appears that it's unnecessary to continue the loop as a whole; you should refrain from further execution of the loop's body and go further;
it appears that you need to start the next turn of the loop without completing the execution of the current turn.
Python provides two special instructions for the implementation of both these tasks.
These two instructions are:
break – exits the loop immediately, and unconditionally ends the loop's operation; the program begins to execute the nearest instruction after the loop's body;
continue – behaves as if the program has suddenly reached the end of the body; the next turn is started and the condition expression is tested immediately.
Both these words are keywords.
print("The break instruction:")
for i in range(1, 6):
    if i == 3:
        break
    print("Inside the loop.", i)
print("Outside the loop.")


# continue - example
print("\nThe continue instruction:")
for i in range(1, 6):
    if i == 3:
        continue
    print("Inside the loop.", i)
print("Outside the loop.")
Output
The break instruction:
Inside the loop. 1
Inside the loop. 2
Outside the loop.

The continue instruction:
Inside the loop. 1
Inside the loop. 2
Inside the loop. 4
Inside the loop. 5
Outside the loop.
largest_number = -99999999
counter = 0
number = int(input("Enter a number or type -1 to end program: "))
while number != -1:
    if number == -1:
        continue
    counter += 1

    if number > largest_number:
        largest_number = number
    number = int(input("Enter a number or type -1 to end the program: "))
if counter:
    print("The largest number is", largest_number)
else:
    print("You haven't entered any number.")
Output: It continues
Enter a number or type -1 to end program: 80
Enter a number or type -1 to end the program: 90
Enter a number or type -1 to end the program: 87
Enter a number or type -1 to end the program:

SECTION SUMMARY
There are two types of loops in Python: while and for: 
the while loop executes a statement or a set of statements as long as a specified boolean condition is true, e.g.: # Example 1
while True:
    print("Stuck in an infinite loop.")
# Example 2
counter = 5
while counter > 2:
    print(counter)
    counter -= 1
The continue statement is used to skip the current block and move ahead to the next iteration, without executing the statements inside the loop.
It can be used with both the while and for loops.
•	a for loop;
•	the concept of conditional execution (if-elif-else)
•	the continue statement.

for i in range(1, 10):
    if i % 2 == 0:
        print(i)

text = "OpenEDG Python Institute"for letter in text:
    if letter == "P":
        break
    print(letter, end="")

The while and for loops can also have an else clause in Python. The else clause executes after the loop finishes its execution as long as it has not been terminated by break, e.g.:
n = 0
while n != 3:
    print(n)
    n += 1
else:
    print(n, "else")
 print()
 for i in range(0, 3):
    print(i)
else:
    print(i, "else")
0
1
2
2 else
blocks= int(input("Enter the number of blocks: "))
height = blocks/2
print("The height of the pyramid:", height)
for i in range(0, 6, 3):
    print(i)
0
3

n = range(4)
 
for num in n:
    print(num - 1)
else:
    print(num)
output:
 -1
0
1
2
3

n = 3
while n > 0:
    print(n + 1)
    n -= 1
else:
    print(n)
output
 4
3
2
0
for i in range(0, 11):
    if i % 2 != 0:
        print(i) odd numbers or for I in range(0,11,2)
output: [1,3,5,7,9]
x = 1
while x < 11:
    if x % 2 != 0:
        print(x)
    x += 1
output: [1,3,5,7,9]

Create a program with a for loop and a break statement. The program should iterate over characters in an email address, exit the loop when it reaches the @ symbol, and print the part before @ on one line. Use the skeleton below:
for ch in "john.smith@pythoninstitute.org":
    if ch == "@":
        break
    print(ch, end="")
output: john.smith
Create a program with a for loop and a continue statement. The program should iterate over a string of digits, replace each 0 with x, and print the modified string to the screen. Use the skeleton below:
for digit in "0165031806510":
    if digit == "0":
        print("x", end="")
        continue
    print(digit, end="")
output: x165x318x651x
