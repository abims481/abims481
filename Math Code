	MATLAB CODE FOR SOLVING OPTIMALITY SYSTEM WITH FOURTH ORDER RUNGE-KUTTA SCHEME USING FORWARD-BACKWARD SWEEP APPROACH 
	\begin{verbatim}
		function y = Cholera1(a,B,delta,D,gamma,d,Q,e,c,w3,w4,w5)
		global t h h2 N
		test = -1;
		N = 100;
		t = linspace(0, 100, N+1);
		h = 10/N;
		h2 = h/2;
		%C = a/d;
		
		% Assigning weights to each of the terms in the Objective functional
		w1 = 1;
		w2 = 1;
		%w3 = 5.0;
		% w4 = 10.0;
		%w5 = 5.0
		
		x10 = 12;
		x20 = 5;
		x30 = 8;
		x40 = 3;
		x50 = 2;
		
		% Assigning bounds to each of the control variables
		u1max = 0.7;
		u2max = 0.5;
		u3max = 0.98;
		
		% Pre-allocating memory space for control variables
		u1 = zeros(1,N+1);
		u2 = zeros(1,N+1);
		u3 = zeros(1,N+1);
		
		% Pre-allocating memory space for states variables
		x1 = zeros(1,N+1);
		x2 = zeros(1,N+1);
		x3 = zeros(1,N+1);
		x4 = zeros(1,N+1);
		x5 = zeros(1,N+1);
		
		% Setting the initial coditions for the state variables
		x1(1) = x10;
		x2(1) = x20;
		x3(1) = x30;
		x4(1) = x40;
		x5(1) = x50;
		% Pre-allocating memory space for adjoint variables
		lambda1 = zeros(1,N+1);
		lambda2 = zeros(1,N+1);
		lambda3 = zeros(1,N+1);
		lambda4 = zeros(1,N+1);
		lambda5 = zeros(1,N+1);
		while (test < 0)
		% This step stores current values  as previous ones
		% Storing the preceeding values of the control variables
		oldu1 = u1;
		oldu2 = u2;
		oldu3 = u3;
		
		% Storing the preceeding values of the state variables
		oldx1 = x1;
		oldx2 = x2;
		oldx3 = x3;
		oldx4 = x4;
		oldx5 = x5;
		
		% Storing the preceeding values of the adjoint variables
		oldlambda1 = lambda1;
		oldlambda2 = lambda2;
		oldlambda3 = lambda3;
		oldlambda4 = lambda4;
		oldlambda5 = lambda5;
		
		
		% forward sweep with RK order 4  to evaluate the state variables
		% if (k-lambda1(N+1)*x1(N+1) < 0)
		for i = 1:N
		
		k1 = a - ((1-u1(i))*(B*x1(i)*x5(i))/( Q + x5(i))) + gamma*x4(i) + e*x2(i) - 
		u2(i)*x1(i)-D*x1(i);
		
		l1 = u2(i)*x1(i) - e*x2(i) - D*x2(i);
		
		m1 = ((1-u1(i))*(B*x1(i)*x5(i))/(Q + x5(i))) - u3(i)*x3(i) - delta*x3(i) - D*x3(i);
		
		n1 = u3(i)*x3(i) + gamma*x4(i) + D*x4(i);
		
		p1 = c*x3(i) - d*x5(i);
		
		%p1 = bacterial compartment
		%Q = W
		%D = mu death
		%c = alpha
		   k2 = a - ((1-(0.5*(u1(i) + u1(i+1)))))*(B*(x1(i) + h2*k1)*(x5(i) + h2*p1))/
		   ( Q + (x5(i) + h2*p1)) + gamma*(x4(i) + h2*n1) + e*(x2(i) + h2*l1) - 0.5*(u2(i) + 
		   u2(i+1))*(x1(i) + h2*k1)-D*(x1(i) + h2*k1);
		
		l2 = 0.5*(u2(i) + u2(i+1))*(x1(i) + h2*k1) - e*(x2(i) + h2*l1) - D*(x2(i) + h2*l1);
		
		m2 = ((1-(0.5*(u1(i) + u1(i+1)))))*(B*(x1(i) + h2*k1)*(x5(i) + h2*p1))/(Q + (x5(i) +
		h2*p1))- (0.5*(u3(i) + u3(i+1)))*(x3(i) + h2*m1) - delta*(x3(i) +
		 h2*m1) - D*(x3(i) + h2*m1);
		
		n2 = 0.5*(u1(i)+u1(i+1))*(x3(i)+ h2*m1) + gamma*(x4(i)+h2*n1) - d*(x4(i)+h2*n1);
		
		p2 = c * (x3(i)+ h2*m1) - d*(x5(i) +h2*p1);
		
		  k3 = a - ((1-(0.5*(u1(i) + u1(i+1)))))*(B*(x1(i) + h2*k2)*(x5(i) + h2*p2))/
		  ( Q + (x5(i) + h2*p2)) + gamma*(x4(i) + h2*n2) + e*(x2(i) + h2*l2) - 0.5*(u2(i) +
		   u2(i+1))* (x1(i) + h2*k2)-D*(x1(i) + h2*k2);
		
		l3 = 0.5*(u2(i) + u2(i+1))*(x1(i) + h2*k2) - e*(x2(i) + h2*l2) - D*(x2(i) + h2*l2);
		
		m3 = ((1-(0.5*(u1(i) + u1(i+1)))))*(B*(x1(i) + h2*k1)*(x5(i) + h2*p1))/
		(Q + (x5(i) +h2*p1)) - (0.5*(u3(i) + u3(i+1)))*(x3(i) + h2*m1) -
		 delta*(x3(i) + h2*m1) - D*(x3(i) + h2*m1);
		
		n3 = 0.5*(u1(i)+u1(i+1))*(x3(i)+ h2*m2) + gamma*(x4(i)+h2*n2) - d*(x4(i)+h2*n2);
		
		p3 = c * (x3(i)+ h2*m2) - d*(x5(i) +h2*p2);
		
		
		k4 = a - ((1-(0.5*(u1(i)+u1(i+1))))*(B*(x1(i)+h*k3)*(x5(i)+h*p3)/( Q + (x5(i) +h*p3))) +
		 gamma*(x4(i)+h*n3) + e*(x2(i)+h*l3) - 0.5*(u2(i)+u2(i+1))*(x1(i)+h*k3)-D*x1(i));
		
		l4 = 0.5*(u2(i)+u2(i+1)*(x1(i)+h*k3))-e*(x2(i)+h*l3)-D*(x2(i)+h*l3);
		
		m4 = (1-(0.5*(u1(i)+u1(i+1)))*(B*(x1(i)+h*k3)*(x5(i)+h*p3))/(Q + (x5(i)+h*p3))) -
		(0.5*(u3(i)+u3(i+1)*(x3(i)+h*m3))) - delta*(x3(i)+h*m3) - D*(x3(i)+h*m3);
		
		n4 = 0.5*(u3(i)+u3(i+1))*(x3(i)+h*m3) + gamma*(x4(i)+h*n3) + D*(x4(i)+h*n3);
		
		p4 = c*(x3(i)+h*m3) - d*(x5(i)+h*p3);
		
		x1(i+1) = x1(i) + (h/6)*(k1 + 2*k2 + 2*k3 + k4);
		
		x2(i+1) = x2(i) + (h/6)*(l1 + 2*l2 + 2*l3 + l4);
		
		x3(i+1) = x3(i) + (h/6)*(m1 + 2*m2 + 2*m3 + m4);
		
		x4(i+1) = x4(i) + (h/6)*(n1 + 2*n2 + 2*n3 + n4);
		
		x5(i+1) = x5(i) + (h/6)*(p1 + 2*p2 + 2*p3 + p4);
		
		% Backward sweep with RK order 4
	for i = 1:N
	j = N + 2 -i;
	
	
	
	
	
	
	k1 = -lambda1(j)*(((1-u1(j))*B*x5(j)/ (Q + x5(j))) - u2(j) - D) - lambda2(j) * u2(j) - 
	lambda3(j)*(((1-u1(j))*B*x5(j))/ (Q + x5(j)));
	
	l1 =  lambda2(j)*(e +D) - lambda1(j)*e;
	
	m1 = -w1 + lambda1(j)*(u3(j)+ delta +D) -lambda4(j)* u3(j) - lambda5(j)* c;
	
	n1 = lambda4(j)*(gamma +D) - lambda1(j)*gamma;
	
	p1 = -w2 -lambda1(j)*((B*x1(j)*(1-u1(j))/(Q+x5(j))) + (B*x1(j)*x5(j)*
	(1-u1(j))/(Q+x5(j))^2) - lambda3(j)* B*x1(j)*(1-u1(j))/(Q+x5(j)) + B*x1(j)*x5(j)*
	(1-u1(j))/(Q+x5(j))^2) + lambda5(j)*d;
	
	
	k2 = -(lambda1(j) - h2*k1)*((1-(0.5*(u1(j) + u1(j-1))))*B*(x5(j)+x5(j-1))/
	 (Q + 0.5*(x5(j)+x5(j-1)))) + 0.5*(u2(j)+u2(j-1)) + D-(lambda2(j) - h2*l1) *
	 0.5*(u2(j)+u2(j-1)) - (lambda3(j) - h2*m1)*(1-(0.5*(u1(j) + u1(j-1))))
	*B*(x5(j)+x5(j-1))/ Q + 0.5*(x5(j)+x5(j-1));
	
	l2 =  (lambda2(j) - h2*l1)*(e + D)-(lambda1(j) - h2*k1)* e;
	
	m2 = -w1 + (lambda1(j)-h2*k1)* ((0.5*(u3(j) + u3(j-1))+ delta +D))- 
	(lambda4(j)-h2*n1)*(0.5*(u3(j) + u3(j-1)))- (lambda5(j)-h2*p1)* c ;
	
	n2 = (lambda4(j)-h2*n1)*(gamma +D) -(lambda1(j) - h2*k1)*gamma;
	
	p2 = -w2 - (lambda1(j) - h2*k1)*(((B*(x1(j)+x1(j-1))*(1-(0.5*(u1(j) + u1(j-1)))))/
	(x5(j)+x5(j-1))) + ((B*(x1(j)+x1(j-1))*(1-(0.5*(u1(j) + u1(j-1)))))/(x5(j)+x5(j-1)))^2)-
	 (lambda3(j) - h2*m1)*(((B*(x1(j)+x1(j-1))*(1-(0.5*(u1(j) + 
	 u1(j-1)))))/ (x5(j)+x5(j-1))) + ((B*(x1(j)+x1(j-1))*(1-(0.5*(u1(j) + u1(j-1)))))/
	 (x5(j)+x5(j-1)))^2)- (lambda5(j)-h2*p1)*d;
	
	
	k3 =-(lambda1(j) - h2*k2)*((1-(0.5*(u1(j) + u1(j-1))))*B*(x5(j)+x5(j-1))/ (Q + 0.5*(x5(j)+
	x5(j-1)))) + 0.5*(u2(j)+u2(j-1)) + D-(lambda2(j) - h2*l2) * 0.5*(u2(j)+u2(j-1)) -
	 (lambda3(j) - h2*m2)*(1-(0.5*(u1(j) + u1(j-1))))*B*(x5(j)+x5(j-1))/ 
	 Q + 0.5*(x5(j)+x5(j-1));
	
	l3 =  (lambda2(j) - h2*l2)*(e + D)-(lambda1(j) - h2*k2)* e;
	
	m3 = -w1 + (lambda1(j)-h2*k2)* ((0.5*(u3(j) + u3(j-1))+ delta +D))-
	 (lambda4(j)-h2*n2)*(0.5*(u3(j) + u3(j-1)))- (lambda5(j)-h2*p2)* c ;
	
	n3 = (lambda4(j)-h2*n2)*(gamma +D) -(lambda1(j) - h2*k2)*gamma;
	
	p3 = -w2 - (lambda1(j) - h2*k2)*(((B*(x1(j)+x1(j-1))*(1-(0.5*(u1(j) + u1(j-1)))))/
	(x5(j)+x5(j-1))) + ((B*(x1(j)+x1(j-1))*(1-(0.5*(u1(j) + u1(j-1)))))/
	(x5(j)+x5(j-1)))^2)-(lambda3(j) - h2*m2)*(((B*(x1(j)+x1(j-1))*(1-(0.5*(u1(j) + 
	u1(j-1)))))/(x5(j)+x5(j-1))) + ((B*(x1(j)+x1(j-1))*(1-(0.5*(u1(j) + u1(j-1)))))/
	(x5(j)+x5(j-1)))^2)- (lambda5(j)-h2*p1)*d;
	
	
	
	k4 = -(lambda1(j) - h*k3)*((1-(0.5*(u1(j) + u1(j-1)))*B*(x5(j)+x5(j-1))/ (Q + 0.5*(x5(j)+
	x5(j-1)))) - 0.5*(u2(j)+u2(j-1)) - D)-(lambda2(j) - h*l3) * 0.5*(u2(j)+u2(j-1))-
	 (lambda3(j) - h*m3)*((1-(0.5*(u1(j) +
	  u1(j-1))))*B*(x5(j)+x5(j-1))/ (Q + 0.5*(x5(j)+x5(j-1))));
	
	l4 =  (lambda2(j) - h*l3)*(e + D)-(lambda1(j) - h*k3)* e;
	
	m4 =   -w1 + (lambda1(j)-h*k3)* ((0.5*(u3(j) + u3(j-1))+ delta +D))- 
	(lambda4(j)-h*n3)*(0.5*(u3(j) + u3(j-1)))- (lambda5(j)-h*p3)*c;
	
	n4 = (lambda4(j)-h*n3)*(gamma +D) -(lambda1(j) - h*k3)*gamma;
	
	p4 = -w2 - (lambda1(j) - h*k3)*(((B*(x1(j)+x1(j-1))*(1-(0.5*(u1(j) + u1(j-1)))))/
	x5(j)+x5(j-1)))+ (B*(x1(j)+x1(j-1))*(x5(j)+x5(j-1)))*(1-(0.5*(u1(j)) + u1(j-1)))/
	(Q+(x5(j)+x5(j-1)))^2)-
	 (lambda3(j) - h*m3)*(((B*(x1(j)+x1(j-1))*(1-(0.5*(u1(j) + u1(j-1)))))/
	 (x5(j)+x5(j-1)))+ (B*(x1(j)+x1(j-1))*(x5(j)+x5(j-1)))*(1-(0.5*(u1(j)) + u1(j-1)))/
	 
	 (Q+(x5(j)+x5(j-1)))^2)- (lambda5(j)-h*p3)*d;
	
	
	
	
	lambda1(j-1) = lambda1(j) - (h/6)*(k1 + 2*k2 + 2*k3 + k4);
	
	lambda2(j-1) = lambda2(j) - (h/6)*(l1 + 2*l2 + 2*l3 + l4);
	
	lambda3(j-1) = lambda3(j) - (h/6)*(m1 + 2*m2 + 2*m3 + m4);
	
	lambda4(j-1) = lambda4(j) - (h/6)*(n1 + 2*n2 + 2*n3 + n4);
	
	lambda5(j-1) = lambda5(j) - (h/6)*(p1 + 2*p2 + 2*p3 + p4);
	
	
	end
	%end
	
	
	
	for i = 1:N+1
	
	%Hu1 = w3*u1(i) - lambda1(i)*x1(i) + lambda4(i)*x1(i);
	%Hu2 = w4*u2(i) - lambda3(i)*x3(i) + lambda4(i)*x3(i);
	
	
	if( (lambda3(i)-lambda1(i)) ) < 0
	u11(i) = 0;
	else
	u11(i) = min( ((lambda3(i)-lambda1(i))*(B*x1(i)*x5(i)/Q+x5(i))  )/w3, u1max);
	end
	
	
	if( (lambda1(i)+lambda2(i)) < 0)
	u22(i) =0;
	else
	u22(i) = min( ( -lambda1(i)- lambda2(i)  )*x1(i)/w4, u2max) ;
	end
	
	if( (lambda3(i)-lambda4(i)) < 0)
	u33(i) =0;
	else
	u33(i) = min( ( lambda3(i)- lambda4(i)  )*x3(i)/w5, u3max) ;
	end
	
	
	u1(i)= 0.5*(u11(i) + oldu1(i));
	u2(i)= 0.5*(u22(i) + oldu2(i));
	u3(i)= 0.5*(u33(i) + oldu3(i));
	
	end
	
	
	
	temp111 = delta*sum(abs(u1)) - sum( abs(oldu1-u1));
	temp222 = delta*sum(abs(u2)) - sum( abs(oldu2-u2));
	temp333 = delta*sum(abs(u3)) - sum( abs(oldu3-u3));
	
	
	temp1 = delta*sum(abs(x1)) - sum( abs(oldx1-x1));
	temp2 = delta*sum(abs(x2)) - sum( abs(oldx2-x2));
	temp3 = delta*sum(abs(x3)) - sum( abs(oldx3-x3));
	temp4 = delta*sum(abs(x4)) - sum( abs(oldx4-x4));
	temp5 = delta*sum(abs(x5)) - sum( abs(oldx5-x5));
	
	
	temp11 = delta*sum(abs(lambda1)) - sum( abs(oldlambda1-lambda1));
	temp22 = delta*sum(abs(lambda2)) - sum( abs(oldlambda2-lambda2));
	temp33 = delta*sum(abs(lambda3)) - sum( abs(oldlambda3-lambda3));
	temp44 = delta*sum(abs(lambda4)) - sum( abs(oldlambda4-lambda4));
	temp55 = delta*sum(abs(lambda5)) - sum( abs(oldlambda5-lambda5));
	
	
	test1 = min([temp1, temp2, temp3, temp4, temp5]);
	test2 = min([temp11, temp22, temp33, temp44, temp55]);
	test3 = min([temp111, temp222, temp333]);
	test  = min( min(test1, test2), test3);
	end
	
	y(1,:) = t;
	
	
	
	y(2,:) = x1;
	y(3,:) = x2;
	y(4,:) = x3;
	y(5,:) = x4;
	y(6,:) = x5;
	
	y(7,:) = lambda1;
	y(8,:) = lambda2;
	y(9,:) = lambda3;
	y(10,:) = lambda4;
	y(11,:) = lambda5;
	
	y(12,:) = u1;
	y(13,:) = u2;
	y(14,:) = u3;
			
		end
		\end{verbatim}
